<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at
         http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<blueprint
    xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="
           http://www.osgi.org/xmlns/blueprint/v1.0.0 https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd">

  <!-- to setup camel servlet with OSGi HttpService -->
    <reference
        id="httpService"
        interface="org.osgi.service.http.HttpService" />

    <bean
        class="org.apache.camel.component.servlet.osgi.OsgiServletRegisterer"
        init-method="register"
        destroy-method="unregister">
        <property
            name="alias"
            value="/people-service/*" />
        <property
            name="httpService"
            ref="httpService" />
        <property
            name="servlet"
            ref="camelServlet" />
    </bean>

    <bean
        id="camelServlet"
        class="org.apache.camel.component.servlet.CamelHttpTransportServlet" />

  <!-- a bean for user services -->
    <bean
        id="userService"
        class="com.redhat.jboss.fuse.UserService" />

    <camelContext xmlns="http://camel.apache.org/schema/blueprint">

    <!-- configure rest to use the camel-servlet component, and use json binding mode -->
    <!-- and tell to output json in pretty print mode -->
    <!-- setup context path and port number that Apache Tomcat will deploy this application with,
         as we use the servlet component, then we need to aid Camel to tell it these details so Camel
         knows the url to the REST services.
         Notice: This is optional, but needed if the RestRegistry should enlist accurate information.
         You can access the RestRegistry from JMX at runtime -->
        <restConfiguration
            component="servlet"
            bindingMode="json"
            contextPath="/people-service/*"
            port="8181"
            apiContextPath="/api-docs"
            apiContextListing="false"
            enableCORS="true">

            <dataFormatProperty
                key="prettyPrint"
                value="true" />

            <!-- setup swagger api descriptions -->
            <apiProperty
                key="base.path"
                value="rest" />
            <apiProperty
                key="api.version"
                value="1.0.0" />
            <apiProperty
                key="api.title"
                value="User Services" />
            <apiProperty
                key="api.description"
                value="Camel Rest Example with Swagger that provides an User REST service" />
            <apiProperty
                key="api.contact.name"
                value="The Apache Camel team" />

        </restConfiguration>

        <!-- defines the rest services using the context-path /user -->
        <rest
            path="/user"
            consumes="application/json"
            produces="application/json"
            apiDocs="true">
            <description>User rest service</description>
            
            <!-- this is a rest GET to view an user by the given id -->
            <get
                uri="/{id}"
                outType="com.redhat.jboss.fuse.User">
                <description>Find user by id</description>
                <param
                    name="id"
                    type="path"
                    description="The id of the user to get"
                    dataType="integer" />
                <responseMessage message="The user that was found" />
                <responseMessage
                    code="404"
                    message="User not found" />
                <to uri="direct:userId" />
            </get>

            <!-- this is a rest PUT to create/update an user -->
            <put type="com.redhat.jboss.fuse.User">
                <description>Updates or create a user</description>
                <param
                    name="body"
                    type="body"
                    description="The user to update or create" />
                <responseMessage
                    code="200"
                    message="User added" />
                <responseMessage
                    code="404"
                    message="Failed to add user" />
                <to uri="bean:userService?method=updateUser" />
            </put>

            <!-- this is a rest GET to find all users -->
            <get
                uri="/findAll"
                outType="com.redhat.jboss.fuse.User[]">
                <description>Find all users</description>
                <responseMessage message="All the users" />
                <to uri="bean:userService?method=listUsers" />
            </get>
        </rest>

        <!-- defines the rest services using the context-path /echo -->
        <rest
            path="/echo"
            consumes="application/json"
            produces="application/json">
            <description>Echo rest service</description>

            <get uri="/ping">
                <description>A ping service</description>
                <responseMessage message="The Ping Response" />
                <route>
                    <transform>
                        <constant>pong</constant>
                    </transform>
                </route>
            </get>

        </rest>

        <route>
            <from uri="direct:userId" />
            <to uri="bean:userService?method=getUser(${header.id})" />
            <filter>
                <simple>${body} == null</simple>
                <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                    <constant>404</constant>
                </setHeader>
            </filter>
        </route>
    </camelContext>

</blueprint>